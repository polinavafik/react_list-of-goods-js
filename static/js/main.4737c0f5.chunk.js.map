{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ABC","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","map","good","index","id","name","sort","a","b","good1","good2","localeCompare","length","Error","reverse","getPreparedGoods","resetBtnFilter","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"0OAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAiB,MACjBC,EAAoB,SA+BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAjCR,SAA0BC,EAA1B,GAA6D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACtCI,EAAgBD,EAAME,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAChDC,GAAID,EAAQ,EACZE,KAAMH,MAqBR,OAlBIR,GACFM,EAAcM,MAAK,SAACC,EAAGC,GACrB,IAAcC,EAAUF,EAAhBF,KACMK,EAAUF,EAAhBH,KAER,OAAQX,GACN,KAAKJ,EACH,OAAOmB,EAAME,cAAcD,GAE7B,KAAKnB,EACH,OAAOkB,EAAMG,OAASF,EAAME,OAE9B,QACE,MAAM,IAAIC,MAAJ,6BAAgCnB,QAKvCE,EACHI,EAAcc,UACdd,EAOiBe,CACnB1B,EACA,CAAEK,YAAWE,eAGToB,EAA+B,KAAdtB,GAAoBE,EAM3C,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,WAAYzB,IAAcJ,IAC9B8B,QAAS,kBAAMzB,EAAaL,IAJ9B,iCASA,wBACE4B,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYzB,IAAcH,IAC9B6B,QAAS,kBAAMzB,EAAaJ,IAJ9B,4BASA,wBACE2B,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,YAAavB,IACjBwB,QAAS,kBAAMvB,GAAeD,IAJhC,qBASCoB,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAvCe,WACvBvB,GAAc,GACdF,EAAa,KAkCP,sBAUJ,6BACGG,EAAaG,KAAI,gBAAGI,EAAH,EAAGA,KAAMD,EAAT,EAASA,GAAT,OAChB,oBACE,UAAQ,OADV,SAIGC,GAFID,YC5GjBiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4737c0f5.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ABC = 'abc';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortField, isReversed }) {\n  const preparedGoods = goods.map((good, index) => ({\n    id: index + 1,\n    name: good,\n  }));\n\n  if (sortField) {\n    preparedGoods.sort((a, b) => {\n      const { name: good1 } = a;\n      const { name: good2 } = b;\n\n      switch (sortField) {\n        case SORT_FIELD_ABC:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          throw new Error(`Invalid sortField: ${sortField}`);\n      }\n    });\n  }\n\n  return isReversed\n    ? preparedGoods.reverse()\n    : preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  const resetBtnFilter = sortField !== '' || isReversed;\n  const handleResetClick = () => {\n    setIsReversed(false);\n    setSortField('');\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SORT_FIELD_ABC })}\n          onClick={() => setSortField(SORT_FIELD_ABC)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SORT_FIELD_LENGTH })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !isReversed })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {resetBtnFilter && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleResetClick}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(({ name, id }) => (\n          <li\n            data-cy=\"Good\"\n            key={id}\n          >\n            {name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}